//
//Quickstart
//
//| Link | | --- | | [Get Token Information](/docs/token-api#get-token-information) | | [Get Mints in Market](/docs/token-api#get-tokens-in-market) | | [Get Tradable Mints](/docs/token-api#get-all-tradable-tokens) | | [Get Tokens by Tag](/docs/token-api#get-tagged-tokens) | | [Get New Tokens](/docs/token-api#get-new-tokens) | | [Get All Tokens](/docs/token-api#get-all-tokens) |
//
//The version of the OpenAPI document: 1.0.0
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: token/services/default_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultService_AllGet_FullMethodName                      = "/jupiter.token.services.defaultservice.DefaultService/AllGet"
	DefaultService_MarketMarketAddressMintsGet_FullMethodName = "/jupiter.token.services.defaultservice.DefaultService/MarketMarketAddressMintsGet"
	DefaultService_MintsTradableGet_FullMethodName            = "/jupiter.token.services.defaultservice.DefaultService/MintsTradableGet"
	DefaultService_NewGet_FullMethodName                      = "/jupiter.token.services.defaultservice.DefaultService/NewGet"
	DefaultService_TaggedTagGet_FullMethodName                = "/jupiter.token.services.defaultservice.DefaultService/TaggedTagGet"
	DefaultService_TokenAddressGet_FullMethodName             = "/jupiter.token.services.defaultservice.DefaultService/TokenAddressGet"
)

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	AllGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllGetResponse, error)
	MarketMarketAddressMintsGet(ctx context.Context, in *MarketMarketAddressMintsGetRequest, opts ...grpc.CallOption) (*MarketMarketAddressMintsGetResponse, error)
	MintsTradableGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MintsTradableGetResponse, error)
	NewGet(ctx context.Context, in *NewGetRequest, opts ...grpc.CallOption) (*NewGetResponse, error)
	TaggedTagGet(ctx context.Context, in *TaggedTagGetRequest, opts ...grpc.CallOption) (*TaggedTagGetResponse, error)
	TokenAddressGet(ctx context.Context, in *TokenAddressGetRequest, opts ...grpc.CallOption) (*TokenAddressGetResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) AllGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_AllGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) MarketMarketAddressMintsGet(ctx context.Context, in *MarketMarketAddressMintsGetRequest, opts ...grpc.CallOption) (*MarketMarketAddressMintsGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarketMarketAddressMintsGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_MarketMarketAddressMintsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) MintsTradableGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MintsTradableGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintsTradableGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_MintsTradableGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) NewGet(ctx context.Context, in *NewGetRequest, opts ...grpc.CallOption) (*NewGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_NewGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) TaggedTagGet(ctx context.Context, in *TaggedTagGetRequest, opts ...grpc.CallOption) (*TaggedTagGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaggedTagGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_TaggedTagGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) TokenAddressGet(ctx context.Context, in *TokenAddressGetRequest, opts ...grpc.CallOption) (*TokenAddressGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenAddressGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_TokenAddressGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility.
type DefaultServiceServer interface {
	AllGet(context.Context, *emptypb.Empty) (*AllGetResponse, error)
	MarketMarketAddressMintsGet(context.Context, *MarketMarketAddressMintsGetRequest) (*MarketMarketAddressMintsGetResponse, error)
	MintsTradableGet(context.Context, *emptypb.Empty) (*MintsTradableGetResponse, error)
	NewGet(context.Context, *NewGetRequest) (*NewGetResponse, error)
	TaggedTagGet(context.Context, *TaggedTagGetRequest) (*TaggedTagGetResponse, error)
	TokenAddressGet(context.Context, *TokenAddressGetRequest) (*TokenAddressGetResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultServiceServer struct{}

func (UnimplementedDefaultServiceServer) AllGet(context.Context, *emptypb.Empty) (*AllGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllGet not implemented")
}
func (UnimplementedDefaultServiceServer) MarketMarketAddressMintsGet(context.Context, *MarketMarketAddressMintsGetRequest) (*MarketMarketAddressMintsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketMarketAddressMintsGet not implemented")
}
func (UnimplementedDefaultServiceServer) MintsTradableGet(context.Context, *emptypb.Empty) (*MintsTradableGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintsTradableGet not implemented")
}
func (UnimplementedDefaultServiceServer) NewGet(context.Context, *NewGetRequest) (*NewGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGet not implemented")
}
func (UnimplementedDefaultServiceServer) TaggedTagGet(context.Context, *TaggedTagGetRequest) (*TaggedTagGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggedTagGet not implemented")
}
func (UnimplementedDefaultServiceServer) TokenAddressGet(context.Context, *TokenAddressGetRequest) (*TokenAddressGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAddressGet not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}
func (UnimplementedDefaultServiceServer) testEmbeddedByValue()                        {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_AllGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).AllGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_AllGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).AllGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_MarketMarketAddressMintsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketMarketAddressMintsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).MarketMarketAddressMintsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_MarketMarketAddressMintsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).MarketMarketAddressMintsGet(ctx, req.(*MarketMarketAddressMintsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_MintsTradableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).MintsTradableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_MintsTradableGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).MintsTradableGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_NewGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).NewGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_NewGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).NewGet(ctx, req.(*NewGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_TaggedTagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggedTagGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).TaggedTagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_TaggedTagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).TaggedTagGet(ctx, req.(*TaggedTagGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_TokenAddressGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAddressGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).TokenAddressGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_TokenAddressGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).TokenAddressGet(ctx, req.(*TokenAddressGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jupiter.token.services.defaultservice.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllGet",
			Handler:    _DefaultService_AllGet_Handler,
		},
		{
			MethodName: "MarketMarketAddressMintsGet",
			Handler:    _DefaultService_MarketMarketAddressMintsGet_Handler,
		},
		{
			MethodName: "MintsTradableGet",
			Handler:    _DefaultService_MintsTradableGet_Handler,
		},
		{
			MethodName: "NewGet",
			Handler:    _DefaultService_NewGet_Handler,
		},
		{
			MethodName: "TaggedTagGet",
			Handler:    _DefaultService_TaggedTagGet_Handler,
		},
		{
			MethodName: "TokenAddressGet",
			Handler:    _DefaultService_TokenAddressGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token/services/default_service.proto",
}
