//
//Quickstart
//
//| Link | | --- | | [Get Order](/docs/ultra-api/get-order) | | [Execute Order](/docs/ultra-api/execute-order) |
//
//The version of the OpenAPI document: 1.0.0
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ultra/services/default_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultService_BalancesAddressGet_FullMethodName = "/jupiter.ultra.services.defaultservice.DefaultService/BalancesAddressGet"
	DefaultService_ExecutePost_FullMethodName        = "/jupiter.ultra.services.defaultservice.DefaultService/ExecutePost"
	DefaultService_OrderGet_FullMethodName           = "/jupiter.ultra.services.defaultservice.DefaultService/OrderGet"
	DefaultService_OrderRoutersGet_FullMethodName    = "/jupiter.ultra.services.defaultservice.DefaultService/OrderRoutersGet"
	DefaultService_ShieldGet_FullMethodName          = "/jupiter.ultra.services.defaultservice.DefaultService/ShieldGet"
)

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	BalancesAddressGet(ctx context.Context, in *BalancesAddressGetRequest, opts ...grpc.CallOption) (*BalancesAddressGetResponse, error)
	ExecutePost(ctx context.Context, in *ExecutePostRequest, opts ...grpc.CallOption) (*ExecutePostResponse, error)
	OrderGet(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error)
	OrderRoutersGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrderRoutersGetResponse, error)
	ShieldGet(ctx context.Context, in *ShieldGetRequest, opts ...grpc.CallOption) (*ShieldGetResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) BalancesAddressGet(ctx context.Context, in *BalancesAddressGetRequest, opts ...grpc.CallOption) (*BalancesAddressGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalancesAddressGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_BalancesAddressGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ExecutePost(ctx context.Context, in *ExecutePostRequest, opts ...grpc.CallOption) (*ExecutePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePostResponse)
	err := c.cc.Invoke(ctx, DefaultService_ExecutePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) OrderGet(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_OrderGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) OrderRoutersGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrderRoutersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRoutersGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_OrderRoutersGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ShieldGet(ctx context.Context, in *ShieldGetRequest, opts ...grpc.CallOption) (*ShieldGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShieldGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_ShieldGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility.
type DefaultServiceServer interface {
	BalancesAddressGet(context.Context, *BalancesAddressGetRequest) (*BalancesAddressGetResponse, error)
	ExecutePost(context.Context, *ExecutePostRequest) (*ExecutePostResponse, error)
	OrderGet(context.Context, *OrderGetRequest) (*OrderGetResponse, error)
	OrderRoutersGet(context.Context, *emptypb.Empty) (*OrderRoutersGetResponse, error)
	ShieldGet(context.Context, *ShieldGetRequest) (*ShieldGetResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultServiceServer struct{}

func (UnimplementedDefaultServiceServer) BalancesAddressGet(context.Context, *BalancesAddressGetRequest) (*BalancesAddressGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalancesAddressGet not implemented")
}
func (UnimplementedDefaultServiceServer) ExecutePost(context.Context, *ExecutePostRequest) (*ExecutePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePost not implemented")
}
func (UnimplementedDefaultServiceServer) OrderGet(context.Context, *OrderGetRequest) (*OrderGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderGet not implemented")
}
func (UnimplementedDefaultServiceServer) OrderRoutersGet(context.Context, *emptypb.Empty) (*OrderRoutersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRoutersGet not implemented")
}
func (UnimplementedDefaultServiceServer) ShieldGet(context.Context, *ShieldGetRequest) (*ShieldGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShieldGet not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}
func (UnimplementedDefaultServiceServer) testEmbeddedByValue()                        {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_BalancesAddressGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesAddressGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).BalancesAddressGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_BalancesAddressGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).BalancesAddressGet(ctx, req.(*BalancesAddressGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ExecutePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ExecutePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ExecutePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ExecutePost(ctx, req.(*ExecutePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_OrderGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).OrderGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_OrderGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).OrderGet(ctx, req.(*OrderGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_OrderRoutersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).OrderRoutersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_OrderRoutersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).OrderRoutersGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ShieldGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShieldGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ShieldGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ShieldGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ShieldGet(ctx, req.(*ShieldGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jupiter.ultra.services.defaultservice.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalancesAddressGet",
			Handler:    _DefaultService_BalancesAddressGet_Handler,
		},
		{
			MethodName: "ExecutePost",
			Handler:    _DefaultService_ExecutePost_Handler,
		},
		{
			MethodName: "OrderGet",
			Handler:    _DefaultService_OrderGet_Handler,
		},
		{
			MethodName: "OrderRoutersGet",
			Handler:    _DefaultService_OrderRoutersGet_Handler,
		},
		{
			MethodName: "ShieldGet",
			Handler:    _DefaultService_ShieldGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ultra/services/default_service.proto",
}
