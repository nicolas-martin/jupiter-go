//
//Quickstart
//
//| Link | | --- | | [Get Price](/docs/price-api#get-price-only-price) | | [Get Price (vsToken)](/docs/price-api#price-vstoken) | | [Get Price (with Extra Info)](/docs/price-api#get-price-with-extra-info) |
//
//The version of the OpenAPI document: 2.0.0
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: price/services/default_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultService_RootGet_FullMethodName = "/jupiter.price.services.defaultservice.DefaultService/RootGet"
)

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	RootGet(ctx context.Context, in *RootGetRequest, opts ...grpc.CallOption) (*RootGetResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) RootGet(ctx context.Context, in *RootGetRequest, opts ...grpc.CallOption) (*RootGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RootGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_RootGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility.
type DefaultServiceServer interface {
	RootGet(context.Context, *RootGetRequest) (*RootGetResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultServiceServer struct{}

func (UnimplementedDefaultServiceServer) RootGet(context.Context, *RootGetRequest) (*RootGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootGet not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}
func (UnimplementedDefaultServiceServer) testEmbeddedByValue()                        {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_RootGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).RootGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_RootGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).RootGet(ctx, req.(*RootGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jupiter.price.services.defaultservice.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RootGet",
			Handler:    _DefaultService_RootGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "price/services/default_service.proto",
}
