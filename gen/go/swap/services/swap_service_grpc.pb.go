//
//Quickstart
//
//| Link | | --- | | [Get Quote](/docs/swap-api/get-quote) | | [Build Swap Transaction](/docs/swap-api/build-swap-transaction) | | [Send Swap Transaction](/docs/swap-api/send-swap-transaction) |
//
//The version of the OpenAPI document: 1.0.0
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: swap/services/swap_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwapService_ProgramIdToLabelGet_FullMethodName  = "/jupiter.swap.services.swapservice.SwapService/ProgramIdToLabelGet"
	SwapService_QuoteGet_FullMethodName             = "/jupiter.swap.services.swapservice.SwapService/QuoteGet"
	SwapService_SwapInstructionsPost_FullMethodName = "/jupiter.swap.services.swapservice.SwapService/SwapInstructionsPost"
	SwapService_SwapPost_FullMethodName             = "/jupiter.swap.services.swapservice.SwapService/SwapPost"
)

// SwapServiceClient is the client API for SwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapServiceClient interface {
	ProgramIdToLabelGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProgramIdToLabelGetResponse, error)
	QuoteGet(ctx context.Context, in *QuoteGetRequest, opts ...grpc.CallOption) (*QuoteGetResponse, error)
	SwapInstructionsPost(ctx context.Context, in *SwapInstructionsPostRequest, opts ...grpc.CallOption) (*SwapInstructionsPostResponse, error)
	SwapPost(ctx context.Context, in *SwapPostRequest, opts ...grpc.CallOption) (*SwapPostResponse, error)
}

type swapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapServiceClient(cc grpc.ClientConnInterface) SwapServiceClient {
	return &swapServiceClient{cc}
}

func (c *swapServiceClient) ProgramIdToLabelGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProgramIdToLabelGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgramIdToLabelGetResponse)
	err := c.cc.Invoke(ctx, SwapService_ProgramIdToLabelGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) QuoteGet(ctx context.Context, in *QuoteGetRequest, opts ...grpc.CallOption) (*QuoteGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuoteGetResponse)
	err := c.cc.Invoke(ctx, SwapService_QuoteGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SwapInstructionsPost(ctx context.Context, in *SwapInstructionsPostRequest, opts ...grpc.CallOption) (*SwapInstructionsPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapInstructionsPostResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapInstructionsPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SwapPost(ctx context.Context, in *SwapPostRequest, opts ...grpc.CallOption) (*SwapPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapPostResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServiceServer is the server API for SwapService service.
// All implementations must embed UnimplementedSwapServiceServer
// for forward compatibility.
type SwapServiceServer interface {
	ProgramIdToLabelGet(context.Context, *emptypb.Empty) (*ProgramIdToLabelGetResponse, error)
	QuoteGet(context.Context, *QuoteGetRequest) (*QuoteGetResponse, error)
	SwapInstructionsPost(context.Context, *SwapInstructionsPostRequest) (*SwapInstructionsPostResponse, error)
	SwapPost(context.Context, *SwapPostRequest) (*SwapPostResponse, error)
	mustEmbedUnimplementedSwapServiceServer()
}

// UnimplementedSwapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwapServiceServer struct{}

func (UnimplementedSwapServiceServer) ProgramIdToLabelGet(context.Context, *emptypb.Empty) (*ProgramIdToLabelGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgramIdToLabelGet not implemented")
}
func (UnimplementedSwapServiceServer) QuoteGet(context.Context, *QuoteGetRequest) (*QuoteGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteGet not implemented")
}
func (UnimplementedSwapServiceServer) SwapInstructionsPost(context.Context, *SwapInstructionsPostRequest) (*SwapInstructionsPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapInstructionsPost not implemented")
}
func (UnimplementedSwapServiceServer) SwapPost(context.Context, *SwapPostRequest) (*SwapPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPost not implemented")
}
func (UnimplementedSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {}
func (UnimplementedSwapServiceServer) testEmbeddedByValue()                     {}

// UnsafeSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServiceServer will
// result in compilation errors.
type UnsafeSwapServiceServer interface {
	mustEmbedUnimplementedSwapServiceServer()
}

func RegisterSwapServiceServer(s grpc.ServiceRegistrar, srv SwapServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwapService_ServiceDesc, srv)
}

func _SwapService_ProgramIdToLabelGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).ProgramIdToLabelGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_ProgramIdToLabelGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).ProgramIdToLabelGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_QuoteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).QuoteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_QuoteGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).QuoteGet(ctx, req.(*QuoteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SwapInstructionsPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapInstructionsPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapInstructionsPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapInstructionsPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapInstructionsPost(ctx, req.(*SwapInstructionsPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SwapPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapPost(ctx, req.(*SwapPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwapService_ServiceDesc is the grpc.ServiceDesc for SwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jupiter.swap.services.swapservice.SwapService",
	HandlerType: (*SwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProgramIdToLabelGet",
			Handler:    _SwapService_ProgramIdToLabelGet_Handler,
		},
		{
			MethodName: "QuoteGet",
			Handler:    _SwapService_QuoteGet_Handler,
		},
		{
			MethodName: "SwapInstructionsPost",
			Handler:    _SwapService_SwapInstructionsPost_Handler,
		},
		{
			MethodName: "SwapPost",
			Handler:    _SwapService_SwapPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap/services/swap_service.proto",
}
