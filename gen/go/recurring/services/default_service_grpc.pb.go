//
//Recurring Order API
//
//| Link | | --- | | [Create Order](/docs/recurring-api/create-order) | | [Execute Order](/docs/recurring-api/execute-order) | | [Cancel Order](/docs/recurring-api/cancel-order) | | [Price Deposit](/docs/recurring-api/deposit-price-order) | | [Price Withdraw](/docs/recurring-api/withdraw-price-order) | | [Get Recurring Orders](/docs/recurring-api/get-recurring-orders) |
//
//The version of the OpenAPI document: 1.0.0
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: recurring/services/default_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultService_CancelOrderPost_FullMethodName       = "/jupiter.recurring.services.defaultservice.DefaultService/CancelOrderPost"
	DefaultService_CreateOrderPost_FullMethodName       = "/jupiter.recurring.services.defaultservice.DefaultService/CreateOrderPost"
	DefaultService_ExecutePost_FullMethodName           = "/jupiter.recurring.services.defaultservice.DefaultService/ExecutePost"
	DefaultService_GetRecurringOrdersGet_FullMethodName = "/jupiter.recurring.services.defaultservice.DefaultService/GetRecurringOrdersGet"
	DefaultService_PriceDepositPost_FullMethodName      = "/jupiter.recurring.services.defaultservice.DefaultService/PriceDepositPost"
	DefaultService_PriceWithdrawPost_FullMethodName     = "/jupiter.recurring.services.defaultservice.DefaultService/PriceWithdrawPost"
)

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	CancelOrderPost(ctx context.Context, in *CancelOrderPostRequest, opts ...grpc.CallOption) (*CancelOrderPostResponse, error)
	CreateOrderPost(ctx context.Context, in *CreateOrderPostRequest, opts ...grpc.CallOption) (*CreateOrderPostResponse, error)
	ExecutePost(ctx context.Context, in *ExecutePostRequest, opts ...grpc.CallOption) (*ExecutePostResponse, error)
	GetRecurringOrdersGet(ctx context.Context, in *GetRecurringOrdersGetRequest, opts ...grpc.CallOption) (*GetRecurringOrdersGetResponse, error)
	PriceDepositPost(ctx context.Context, in *PriceDepositPostRequest, opts ...grpc.CallOption) (*PriceDepositPostResponse, error)
	PriceWithdrawPost(ctx context.Context, in *PriceWithdrawPostRequest, opts ...grpc.CallOption) (*PriceWithdrawPostResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) CancelOrderPost(ctx context.Context, in *CancelOrderPostRequest, opts ...grpc.CallOption) (*CancelOrderPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderPostResponse)
	err := c.cc.Invoke(ctx, DefaultService_CancelOrderPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) CreateOrderPost(ctx context.Context, in *CreateOrderPostRequest, opts ...grpc.CallOption) (*CreateOrderPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderPostResponse)
	err := c.cc.Invoke(ctx, DefaultService_CreateOrderPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ExecutePost(ctx context.Context, in *ExecutePostRequest, opts ...grpc.CallOption) (*ExecutePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePostResponse)
	err := c.cc.Invoke(ctx, DefaultService_ExecutePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) GetRecurringOrdersGet(ctx context.Context, in *GetRecurringOrdersGetRequest, opts ...grpc.CallOption) (*GetRecurringOrdersGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecurringOrdersGetResponse)
	err := c.cc.Invoke(ctx, DefaultService_GetRecurringOrdersGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) PriceDepositPost(ctx context.Context, in *PriceDepositPostRequest, opts ...grpc.CallOption) (*PriceDepositPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceDepositPostResponse)
	err := c.cc.Invoke(ctx, DefaultService_PriceDepositPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) PriceWithdrawPost(ctx context.Context, in *PriceWithdrawPostRequest, opts ...grpc.CallOption) (*PriceWithdrawPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceWithdrawPostResponse)
	err := c.cc.Invoke(ctx, DefaultService_PriceWithdrawPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility.
type DefaultServiceServer interface {
	CancelOrderPost(context.Context, *CancelOrderPostRequest) (*CancelOrderPostResponse, error)
	CreateOrderPost(context.Context, *CreateOrderPostRequest) (*CreateOrderPostResponse, error)
	ExecutePost(context.Context, *ExecutePostRequest) (*ExecutePostResponse, error)
	GetRecurringOrdersGet(context.Context, *GetRecurringOrdersGetRequest) (*GetRecurringOrdersGetResponse, error)
	PriceDepositPost(context.Context, *PriceDepositPostRequest) (*PriceDepositPostResponse, error)
	PriceWithdrawPost(context.Context, *PriceWithdrawPostRequest) (*PriceWithdrawPostResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultServiceServer struct{}

func (UnimplementedDefaultServiceServer) CancelOrderPost(context.Context, *CancelOrderPostRequest) (*CancelOrderPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrderPost not implemented")
}
func (UnimplementedDefaultServiceServer) CreateOrderPost(context.Context, *CreateOrderPostRequest) (*CreateOrderPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPost not implemented")
}
func (UnimplementedDefaultServiceServer) ExecutePost(context.Context, *ExecutePostRequest) (*ExecutePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePost not implemented")
}
func (UnimplementedDefaultServiceServer) GetRecurringOrdersGet(context.Context, *GetRecurringOrdersGetRequest) (*GetRecurringOrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecurringOrdersGet not implemented")
}
func (UnimplementedDefaultServiceServer) PriceDepositPost(context.Context, *PriceDepositPostRequest) (*PriceDepositPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceDepositPost not implemented")
}
func (UnimplementedDefaultServiceServer) PriceWithdrawPost(context.Context, *PriceWithdrawPostRequest) (*PriceWithdrawPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceWithdrawPost not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}
func (UnimplementedDefaultServiceServer) testEmbeddedByValue()                        {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_CancelOrderPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).CancelOrderPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_CancelOrderPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).CancelOrderPost(ctx, req.(*CancelOrderPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_CreateOrderPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).CreateOrderPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_CreateOrderPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).CreateOrderPost(ctx, req.(*CreateOrderPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ExecutePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ExecutePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ExecutePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ExecutePost(ctx, req.(*ExecutePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_GetRecurringOrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecurringOrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).GetRecurringOrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_GetRecurringOrdersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).GetRecurringOrdersGet(ctx, req.(*GetRecurringOrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_PriceDepositPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceDepositPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).PriceDepositPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_PriceDepositPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).PriceDepositPost(ctx, req.(*PriceDepositPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_PriceWithdrawPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceWithdrawPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).PriceWithdrawPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_PriceWithdrawPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).PriceWithdrawPost(ctx, req.(*PriceWithdrawPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jupiter.recurring.services.defaultservice.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelOrderPost",
			Handler:    _DefaultService_CancelOrderPost_Handler,
		},
		{
			MethodName: "CreateOrderPost",
			Handler:    _DefaultService_CreateOrderPost_Handler,
		},
		{
			MethodName: "ExecutePost",
			Handler:    _DefaultService_ExecutePost_Handler,
		},
		{
			MethodName: "GetRecurringOrdersGet",
			Handler:    _DefaultService_GetRecurringOrdersGet_Handler,
		},
		{
			MethodName: "PriceDepositPost",
			Handler:    _DefaultService_PriceDepositPost_Handler,
		},
		{
			MethodName: "PriceWithdrawPost",
			Handler:    _DefaultService_PriceWithdrawPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recurring/services/default_service.proto",
}
