openapi: 3.0.0
info:
  title: Recurring Order API
  version: 1.0.0
  description: |
    | Link |
    | --- |
    | [Create Order](/docs/recurring-api/create-order) |
    | [Execute Order](/docs/recurring-api/execute-order) |
    | [Cancel Order](/docs/recurring-api/cancel-order) |
    | [Price Deposit](/docs/recurring-api/deposit-price-order) |
    | [Price Withdraw](/docs/recurring-api/withdraw-price-order) |
    | [Get Recurring Orders](/docs/recurring-api/get-recurring-orders) |

servers:
  - url: https://lite-api.jup.ag/recurring/v1
    description: Free tier API endpoint with rate limits
  - url: https://api.jup.ag/recurring/v1
    description: Paid tier API endpoint with higher rate limits to be used with an API Key

paths:
  /cancelOrder:
    post:
      summary: cancelOrder
      description: |
        Request for a base64-encoded unsigned recurring order cancellation transaction to be used in `POST /recurring/v1/execute`

        :::note
        - `recurringType` is used to denote the type of recurring order, can be `time` or `price`
        - Refer to [Recurring API doc](/docs/recurring-api/cancel-order) for more information
        :::
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseRecurring'
      responses:
        '200':
          description: Recurring order closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

  /createOrder:
    post:
      summary: createOrder
      description: |
        Request for a base64-encoded unsigned recurring order creation transaction to be used in `POST /recurring/v1/execute`

        :::note
        - Pass in the correct recurring type in the `params` field, can be `time` or `price`
        - Refer to [Recurring API doc](/docs/recurring-api/create-order) for more information
        :::
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecurring'
      responses:
        '200':
          description: Recurring order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

  /execute:
    post:
      summary: execute
      description: |
        Execute the signed transaction and get the execution status

        :::note
        - The `requestId` is found in the response of `/createOrder` or `/cancelOrder`
        - `recurringType` is used to denote the type of recurring order, can be `time` or `price`
        - Refer to [Recurring API doc](/docs/recurring-api/execute-order) for more information
        :::
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteRecurring'
      responses:
        '200':
          description: Transaction executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteRecurringResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

  /getRecurringOrders:
    get:
      summary: getRecurringOrders
      description: |
        Request for the active or historical orders associated to the provided account

        :::note
        - `recurringType` is used to denote the type of recurring order, can be `time` or `price`
        - Each type's data format differs; handle both accordingly
        - Refer to [Recurring API doc](/docs/recurring-api/get-recurring-orders) for more information
        :::
      parameters:
        - name: recurringType
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/RecurringOrderType'
        - name: orderStatus
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OrderState'
        - name: user
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: mint
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: includeFailedTx
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successfully retrieved recurring orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecurringOrderResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

  /priceDeposit:
    post:
      summary: priceDeposit
      description: |
        Request for a base64-encoded unsigned price-based recurring order deposit transaction to be used in `POST /recurring/v1/execute`

        :::note
        - Refer to [Recurring API doc](/docs/recurring-api/deposit-price-order) for more information
        :::
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositPriceRecurring'
      responses:
        '200':
          description: Deposit transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

  /priceWithdraw:
    post:
      summary: priceWithdraw
      description: |
        Request for a base64-encoded unsigned price-based recurring order withdrawal transaction to be used in `POST /recurring/v1/execute`

        :::note
        - Auto-withdraws the output mint amount after execution
        - Does not close the order; close manually with `/cancelOrder`
        - Refer to [Recurring API doc](/docs/recurring-api/withdraw-price-order) for more information
        :::
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawPriceRecurring'
      responses:
        '200':
          description: Withdraw transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringResponse'
        '400': { description: Bad request }
        '500': { description: Internal server error }

components:
  schemas:
    AllRecurringResponse:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/TimeRecurringResponse'
            - type: object
              required:
                - recurringType
              properties:
                recurringType:
                  type: string
                  enum: [time]
        - allOf:
            - $ref: '#/components/schemas/PriceRecurringResponse'
            - type: object
              required:
                - recurringType
              properties:
                recurringType:
                  type: string
                  enum: [price]

    CloseRecurring:
      type: object
      required: [user, order, recurringType]
      properties:
        user:
          type: string
        order:
          type: string
          description: Base-58 account of the Recurring Order
        recurringType:
          $ref: '#/components/schemas/CloseRecurringType'

    CloseRecurringType:
      type: string
      enum: [time, price]

    CreateRecurring:
      type: object
      required: [user, inputMint, outputMint, params]
      properties:
        user:
          type: string
        inputMint:
          type: string
        outputMint:
          type: string
        params:
          $ref: '#/components/schemas/RecurringType'
      example:
        user: jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3
        inputMint: So11111111111111111111111111111111111111112
        outputMint: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
        params:
          time:
            inAmount: 1000000000
            numberOfOrders: 10
            interval: 86400

    DepositPriceRecurring:
      type: object
      required: [user, order, amount]
      properties:
        user:
          type: string
        order:
          type: string
          description: Base-58 account of the Recurring Order
        amount:
          type: integer
          format: int64
          minimum: 0
          nullable: true

    ExecuteRecurring:
      type: object
      required: [requestId, signedTransaction]
      properties:
        requestId:
          type: string
        signedTransaction:
          type: string

    ExecuteRecurringResponse:
      type: object
      required: [signature, status]
      properties:
        signature:
          type: string
        status:
          type: string
          enum: [Success, Failed]
        error:
          type: string
          nullable: true
        order:
          type: string
          nullable: true

    GetRecurringOrderResponse:
      oneOf:
        - type: object
          required: [user, orderStatus, time, totalPages, page]
          properties:
            user:
              type: string
            orderStatus:
              $ref: '#/components/schemas/OrderState'
            page:
              type: integer
              format: int64
              minimum: 0
            time:
              type: array
              items:
                $ref: '#/components/schemas/TimeRecurringResponse'
            totalPages:
              type: integer
              format: int64
              minimum: 0
        - type: object
          required: [user, orderStatus, price, totalPages, page]
          properties:
            user:
              type: string
            orderStatus:
              $ref: '#/components/schemas/OrderState'
            page:
              type: integer
              format: int64
              minimum: 0
            price:
              type: array
              items:
                $ref: '#/components/schemas/PriceRecurringResponse'
            totalPages:
              type: integer
              format: int64
              minimum: 0
        - type: object
          required: [user, orderStatus, all, totalPages, page]
          properties:
            user:
              type: string
            orderStatus:
              $ref: '#/components/schemas/OrderState'
            page:
              type: integer
              format: int64
              minimum: 0
            all:
              type: array
              items:
                $ref: '#/components/schemas/AllRecurringResponse'
            totalPages:
              type: integer
              format: int64
              minimum: 0

    OpenIxArgsWithoutIdx:
      type: object
      required: [interval, depositAmount, incrementUsdcValue]
      properties:
        interval:
          type: integer
          format: int64
          description: In unix seconds
        depositAmount:
          type: integer
          format: int64
          minimum: 0
        incrementUsdcValue:
          type: integer
          format: int64
          minimum: 0
        startAt:
          type: integer
          format: int64
          description: In unix timestamp
          nullable: true

    OrderHistoryResponse:
      type: object
      required:
        - orderKey
        - keeper
        - inputMint
        - outputMint
        - inputAmount
        - outputAmount
        - rawInputAmount
        - rawOutputAmount
        - feeMint
        - feeAmount
        - rawFeeAmount
        - txId
        - confirmedAt
        - action
      properties:
        orderKey:   { type: string }
        keeper:     { type: string }
        inputMint:  { type: string }
        outputMint: { type: string }
        inputAmount:       { type: string }
        outputAmount:      { type: string }
        rawInputAmount:    { type: string }
        rawOutputAmount:   { type: string }
        feeMint:           { type: string }
        feeAmount:         { type: string }
        rawFeeAmount:      { type: string }
        txId:              { type: string }
        confirmedAt:       { type: string, format: date-time }
        action:            { type: string }

    OrderState:
      type: string
      enum: [active, history]

    PriceRecurringResponse:
      type: object
      required:
        - userPubkey
        - orderKey
        - inputMint
        - outputMint
        - inDeposited
        - inWithdrawn
        - inLeft
        - inUsed
        - outReceived
        - outWithdrawn
        - orderInterval
        - incrementalUsdValue
        - supposedUsdValue
        - estimatedUsdcValueSpent
        - rawInDeposited
        - rawInWithdrawn
        - rawInLeft
        - rawInUsed
        - rawOutReceived
        - rawOutWithdrawn
        - rawIncrementalUsdValue
        - rawSupposedUsdValue
        - rawEstimatedUsdcValueSpent
        - status
        - closedBy
        - openTx
        - closeTx
        - createdAt
        - startAt
        - updatedAt
        - trades
      properties:
        userPubkey:              { type: string }
        orderKey:                { type: string }
        inputMint:               { type: string }
        outputMint:              { type: string }
        inDeposited:             { type: string }
        inWithdrawn:             { type: string }
        inLeft:                  { type: string }
        inUsed:                  { type: string }
        outReceived:             { type: string }
        outWithdrawn:            { type: string }
        orderInterval:           { type: string }
        incrementalUsdValue:     { type: string }
        supposedUsdValue:        { type: string }
        estimatedUsdcValueSpent: { type: string }
        rawInDeposited:          { type: string }
        rawInWithdrawn:          { type: string }
        rawInLeft:               { type: string }
        rawInUsed:               { type: string }
        rawOutReceived:          { type: string }
        rawOutWithdrawn:         { type: string }
        rawIncrementalUsdValue:  { type: string }
        rawSupposedUsdValue:     { type: string }
        rawEstimatedUsdcValueSpent: { type: string }
        status:                  { type: string }
        closedBy:                { type: string }
        openTx:                  { type: string }
        closeTx:                 { type: string }
        createdAt:               { type: string, format: date-time }
        startAt:                 { type: string, format: date-time }
        updatedAt:               { type: string, format: date-time }
        trades:
          type: array
          items:
            $ref: '#/components/schemas/OrderHistoryResponse'

    RecurringOrderType:
      type: string
      enum: [time, price, all]

    RecurringResponse:
      type: object
      required: [requestId, transaction]
      properties:
        requestId:   { type: string }
        transaction: { type: string }

    RecurringType:
      oneOf:
        - type: object
          required: [time]
          properties:
            time:
              $ref: '#/components/schemas/TimeRecurringCreationParams'
        - type: object
          required: [price]
          properties:
            price:
              $ref: '#/components/schemas/OpenIxArgsWithoutIdx'

    TimeRecurringCreationParams:
      type: object
      required: [inAmount, numberOfOrders, interval]
      properties:
        inAmount:
          type: integer
          format: int64
          minimum: 0
        interval:
          type: integer
          format: int64
          description: In unix seconds
        numberOfOrders:
          type: integer
          format: int64
          minimum: 0
        maxPrice:
          type: number
          format: double
          nullable: true
        minPrice:
          type: number
          format: double
          nullable: true
        startAt:
          type: integer
          format: int64
          description: In unix timestamp
          nullable: true

    TimeRecurringResponse:
      type: object
      required:
        - userPubkey
        - orderKey
        - inputMint
        - outputMint
        - inDeposited
        - inWithdrawn
        - rawInDeposited
        - rawInWithdrawn
        - cycleFrequency
        - outWithdrawn
        - inAmountPerCycle
        - minOutAmount
        - maxOutAmount
        - inUsed
        - outReceived
        - rawOutWithdrawn
        - rawInAmountPerCycle
        - rawMinOutAmount
        - rawMaxOutAmount
        - rawInUsed
        - rawOutReceived
        - openTx
        - closeTx
        - userClosed
        - createdAt
        - updatedAt
        - trades
      properties:
        userPubkey:        { type: string }
        orderKey:          { type: string }
        inputMint:         { type: string }
        outputMint:        { type: string }
        inDeposited:       { type: string }
        inWithdrawn:       { type: string }
        rawInDeposited:    { type: string }
        rawInWithdrawn:    { type: string }
        cycleFrequency:    { type: string }
        outWithdrawn:      { type: string }
        inAmountPerCycle:  { type: string }
        rawInAmountPerCycle: { type: string }
        minOutAmount:      { type: string }
        rawMinOutAmount:   { type: string }
        maxOutAmount:      { type: string }
        rawMaxOutAmount:   { type: string }
        inUsed:            { type: string }
        rawInUsed:         { type: string }
        outReceived:       { type: string }
        rawOutReceived:    { type: string }
        openTx:            { type: string }
        closeTx:           { type: string }
        userClosed:        { type: boolean }
        createdAt:         { type: string, format: date-time }
        updatedAt:         { type: string, format: date-time }
        trades:
          type: array
          items:
            $ref: '#/components/schemas/OrderHistoryResponse'

    WithdrawPriceRecurring:
      type: object
      required: [user, order, inputOrOutput]
      properties:
        user:
          type: string
        order:
          type: string
          description: Base-58 account of the Recurring Order
        amount:
          type: integer
          format: int64
          minimum: 0
          nullable: true
        inputOrOutput:
          $ref: '#/components/schemas/Withdrawal'

    Withdrawal:
      type: string
      enum: [In, Out]
